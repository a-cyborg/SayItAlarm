package org.a_cyb.sayitalarm.core.database

import android.content.Context
import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import junit.framework.TestCase.assertEquals
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.test.runTest
import org.a_cyb.sayitalarm.core.alarm.AlarmOptionalFeature
import org.a_cyb.sayitalarm.core.alarm.AlarmTerminator
import org.a_cyb.sayitalarm.core.alarm.DreamQuestion
import org.a_cyb.sayitalarm.core.alarm.NoOptionalFeature
import org.a_cyb.sayitalarm.core.alarm.PushButtonTerminator
import org.a_cyb.sayitalarm.core.alarm.VoiceRecognitionTerminator
import org.a_cyb.sayitalarm.core.database.dao.AlarmDao
import org.a_cyb.sayitalarm.core.database.model.AlarmEntity
import org.a_cyb.sayitalarm.core.model.Alarm
import org.a_cyb.sayitalarm.core.model.WeeklyRepeat
import org.junit.After
import org.junit.Before
import org.junit.Test
import java.io.IOException

class AlarmDaoTest {

    private lateinit var db: SiaDatabase
    private lateinit var alarmDao: AlarmDao

    @Before
    fun setup() {
        val context = ApplicationProvider.getApplicationContext<Context>()

        db = Room.inMemoryDatabaseBuilder(context, SiaDatabase::class.java).build()
        alarmDao = db.alarmDao()
    }

    @After
    @Throws(IOException::class)
    fun cleanup() {
        db.close()
    }

    @Test
    fun alarmDao_insert_alarm_and_fetch_alarm() =
        runTest {
            val alarmEntity = testAlarmEntity()

            alarmDao.insertAlarm(alarmEntity)

            val savedAlarm = alarmDao.getAlarmEntities().first()[0]

            assertEquals(alarmEntity.combinedMinutes, savedAlarm.combinedMinutes)
            assertEquals(alarmEntity.enabled, savedAlarm.enabled)
            assertEquals(alarmEntity.weeklyRepeat, savedAlarm.weeklyRepeat)
            assertEquals(alarmEntity.label, savedAlarm.label)
            assertEquals(alarmEntity.vibrate, savedAlarm.vibrate)
            assertEquals(alarmEntity.alarmTerminator, savedAlarm.alarmTerminator)
            assertEquals(alarmEntity.alarmOptionalFeature, savedAlarm.alarmOptionalFeature)
        }

    @Test
    fun alarmDao_fetches_alarms_by_ascending_alarm_time() =
        runTest {
            val combinedMinuteDummy =
                listOf(87, 1178, 1424, 152, 1094, 163, 112, 167, 971, 1011)

            combinedMinuteDummy.forEach {
                alarmDao
                    .insertAlarm(testAlarmEntity(combinedMinute = it))
            }

            val savedAlarmTimes = alarmDao
                .getAlarmEntitiesSortedByCombinedMinute()
                .first()
                .map(AlarmEntity::combinedMinutes)

            assertEquals(combinedMinuteDummy.sorted(), savedAlarmTimes)
        }

    @Test
    fun alarmDao_delete_alarm() =
        runTest {
            // Insert 6 alarms
            List(6) { index -> testAlarmEntity(combinedMinute = index) }
                .forEach { alarmDao.insertAlarm(it) }

            // Partitioning alarms toDelete(odd combinedMinutes value) and toKeep.
            val (toDelete, toKeep) =
                alarmDao
                    .getAlarmEntities()
                    .first()
                    .partition { it.combinedMinutes % 2 == 0 }

            toDelete.forEach { alarmDao.deleteAlarm(it.id) }

            assertEquals(toKeep, alarmDao.getAlarmEntities().first())
        }

    @Test
    fun alarmDao_delete_alarm_should_return_0_or_1() =
        runTest {
            repeat(3) {
                alarmDao
                    .insertAlarm(testAlarmEntity(combinedMinute = (0..1439).random()))
            }

            val savedAlarm = alarmDao.getAlarmEntities().first()[0]

            // Assume id 100 does not exists(id field is autogenerated in increasing rule start from 1).
            assertEquals(0, alarmDao.deleteAlarm(100))
            assertEquals(1, alarmDao.deleteAlarm(savedAlarm.id))
        }

    @Test
    fun alarmDao_update_alarm() =
        runTest {
            alarmDao.insertAlarm(
                testAlarmEntity(
                    combinedMinute = 1231,
                    enabled = false,
                    label = "Original Alarm",
                    weeklyRepeat = WeeklyRepeat.EVERYDAY,
                    alarmTerminator = VoiceRecognitionTerminator(emptyList()),
                    alarmOptionalFeature = NoOptionalFeature
                )
            )

            val updatedAlarm =
                testAlarmEntity(
                    id = alarmDao.getAlarmEntities().first()[0].id,
                    combinedMinute = 333,
                    enabled = true,
                    weeklyRepeat = WeeklyRepeat.NEVER,
                    label = "Updated Alarm",
                    alarmTerminator = PushButtonTerminator,
                    alarmOptionalFeature = NoOptionalFeature,
                )

            alarmDao.insertAlarm(updatedAlarm)

            val savedAlarm = alarmDao.getAlarmEntities().first()[0]

            assertEquals(updatedAlarm.combinedMinutes, savedAlarm.combinedMinutes)
            assertEquals(updatedAlarm.enabled, savedAlarm.enabled)
            assertEquals(updatedAlarm.label, savedAlarm.label)
            assertEquals(updatedAlarm.weeklyRepeat, savedAlarm.weeklyRepeat)
            assertEquals(updatedAlarm.alarmTerminator, savedAlarm.alarmTerminator)
            assertEquals(updatedAlarm.alarmOptionalFeature, savedAlarm.alarmOptionalFeature)
        }

    @Test
    fun alarmDao_update_alarm_enabled() =
        runTest {
            repeat(6) {
                alarmDao
                    .insertAlarm(testAlarmEntity(enabled = false))
            }

            // Set alarm enabled true if it's id is even.
            alarmDao.getAlarmEntities()
                .first()
                .forEach {
                    alarmDao.updateAlarmEnabled(it.id, it.id % 2 == 0)
                }

            alarmDao.getAlarmEntities()
                .first()
                .forEach {
                    assertEquals(it.id % 2 == 0, it.enabled)
                }
        }
}

private fun testAlarmEntity(
    id: Int = Alarm.INVALID_ID.toInt(),
    combinedMinute: Int = 0,
    enabled: Boolean = true,
    weeklyRepeat: WeeklyRepeat = WeeklyRepeat.EVERYDAY,
    label: String = "",
    vibrate: Boolean = true,
    ringtone: String = "",
    alarmTerminator: AlarmTerminator = VoiceRecognitionTerminator(listOf("test1", "test2", "test3")),
    alarmOptionalFeature: AlarmOptionalFeature = DreamQuestion(""),
) = AlarmEntity(
    id = id,
    combinedMinutes = combinedMinute,
    enabled = enabled,
    weeklyRepeat = weeklyRepeat,
    label = label,
    vibrate = vibrate,
    ringtone = ringtone,
    alarmTerminator = alarmTerminator,
    alarmOptionalFeature = alarmOptionalFeature
)